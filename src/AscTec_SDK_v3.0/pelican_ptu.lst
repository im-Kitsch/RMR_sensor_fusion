   1              		.file	"pelican_ptu.c"
   9              	.Ltext0:
  10              		.global	PTU_cam_angle_roll_offset
  11              		.bss
  12              		.align	2
  15              	PTU_cam_angle_roll_offset:
  16 0000 00000000 		.space	4
  17              		.global	PTU_cam_angle_pitch_offset
  18              		.align	2
  21              	PTU_cam_angle_pitch_offset:
  22 0004 00000000 		.space	4
  23              		.global	PTU_enable_plain_ch7_to_servo
  26              	PTU_enable_plain_ch7_to_servo:
  27 0008 00       		.space	1
  28              		.text
  29              		.align	2
  30              		.global	PTU_init
  32              	PTU_init:
  33              	.LFB2:
  34              		.file 1 "pelican_ptu.c"
   1:pelican_ptu.c **** /*
   2:pelican_ptu.c **** 
   3:pelican_ptu.c **** Copyright (c) 2011, Ascending Technologies GmbH
   4:pelican_ptu.c **** All rights reserved.
   5:pelican_ptu.c **** 
   6:pelican_ptu.c **** Redistribution and use in source and binary forms, with or without
   7:pelican_ptu.c **** modification, are permitted provided that the following conditions are met:
   8:pelican_ptu.c **** 
   9:pelican_ptu.c ****  * Redistributions of source code must retain the above copyright notice,
  10:pelican_ptu.c ****    this list of conditions and the following disclaimer.
  11:pelican_ptu.c ****  * Redistributions in binary form must reproduce the above copyright
  12:pelican_ptu.c ****    notice, this list of conditions and the following disclaimer in the
  13:pelican_ptu.c ****    documentation and/or other materials provided with the distribution.
  14:pelican_ptu.c **** 
  15:pelican_ptu.c **** THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
  16:pelican_ptu.c **** EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  17:pelican_ptu.c **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  18:pelican_ptu.c **** DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
  19:pelican_ptu.c **** DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  20:pelican_ptu.c **** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  21:pelican_ptu.c **** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  22:pelican_ptu.c **** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  23:pelican_ptu.c **** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  24:pelican_ptu.c **** OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  25:pelican_ptu.c **** DAMAGE.
  26:pelican_ptu.c **** 
  27:pelican_ptu.c ****  */
  28:pelican_ptu.c **** 
  29:pelican_ptu.c **** /*
  30:pelican_ptu.c **** *	Camera Pan Tilt Unit (PTU) control
  31:pelican_ptu.c **** */
  32:pelican_ptu.c **** 
  33:pelican_ptu.c **** #include "main.h"
  34:pelican_ptu.c **** #include "system.h"
  35:pelican_ptu.c **** #include "pelican_ptu.h"
  36:pelican_ptu.c **** #include "system.h"
  37:pelican_ptu.c **** #include "LPC214x.h"
  38:pelican_ptu.c **** #include "LL_HL_comm.h"
  39:pelican_ptu.c **** #include "sdk.h"
  40:pelican_ptu.c **** 
  41:pelican_ptu.c **** struct CAMERA_PTU CAMERA_ptu;
  42:pelican_ptu.c **** struct CAMERA_COMMANDS CAMERA_Commands;
  43:pelican_ptu.c **** 
  44:pelican_ptu.c **** int PTU_cam_angle_roll_offset=0;
  45:pelican_ptu.c **** int PTU_cam_angle_pitch_offset=0;
  46:pelican_ptu.c **** 
  47:pelican_ptu.c **** unsigned char PTU_enable_plain_ch7_to_servo=0; // channel 7 is mapped plain to 1-2ms servo output
  48:pelican_ptu.c **** 
  49:pelican_ptu.c **** void PTU_init(void)
  50:pelican_ptu.c **** {
  35              	interworking.
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38              		mov	ip, sp
  39 0000 0DC0A0E1 	.LCFI0:
  40              		stmfd	sp!, {fp, ip, lr, pc}
  41 0004 00D82DE9 	.LCFI1:
  42              		sub	fp, ip, #4
  43 0008 04B04CE2 	.LCFI2:
  44              		.loc 1 63 0
  51:pelican_ptu.c **** #ifdef HUMMINGBIRD_ROLL_SERVO
  52:pelican_ptu.c **** #ifndef HUMMINGBIRD_ROLL_SERVO_ON_SSEL0
  53:pelican_ptu.c **** 	PINSEL0&=~0x01;
  54:pelican_ptu.c **** 	PINSEL0|=0x02;
  55:pelican_ptu.c **** #else
  56:pelican_ptu.c **** 	PINSEL0|=0x8000;
  57:pelican_ptu.c **** 	PINSEL0&=~0x4000;
  58:pelican_ptu.c **** #endif
  59:pelican_ptu.c **** #endif
  60:pelican_ptu.c **** 
  61:pelican_ptu.c **** #ifdef PELICAN_PTU
  62:pelican_ptu.c **** 
  63:pelican_ptu.c ****     CAMERA_ptu.servo_pitch_offset=61500;
  45              	L6
  46 000c CC209FE5 		mov	r3, #61440
  47 0010 0F3AA0E3 		add	r3, r3, #60
  48 0014 3C3083E2 		str	r3, [r2, #4]
  49 0018 043082E5 		.loc 1 64 0
  64:pelican_ptu.c **** 	CAMERA_ptu.servo_pitch_scale=54853;
  50              	r2, .L6
  51 001c BC209FE5 		mov	r3, #54784
  52 0020 D63CA0E3 		add	r3, r3, #69
  53 0024 453083E2 		str	r3, [r2, #12]
  54 0028 0C3082E5 		.loc 1 65 0
  65:pelican_ptu.c **** 	CAMERA_ptu.servo_pitch_min=46000;
  55              	r2, .L6
  56 002c AC209FE5 		mov	r3, #45824
  57 0030 B33CA0E3 		add	r3, r3, #176
  58 0034 B03083E2 		str	r3, [r2, #16]
  59 0038 103082E5 		.loc 1 66 0
  66:pelican_ptu.c **** 	CAMERA_ptu.servo_pitch_max=128000;
  60              	r2, .L6
  61 003c 9C209FE5 		mov	r3, #128000
  62 0040 7D3BA0E3 		str	r3, [r2, #20]
  63 0044 143082E5 		.loc 1 68 0
  67:pelican_ptu.c **** 
  68:pelican_ptu.c **** 	if(PTU_cam_option_4_version!=2)
  64              		r3, .L6+4
  65 0048 94309FE5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  66 004c 0030D3E5 		cmp	r3, #2
  67 0050 020053E3 		beq	.L2
  68 0054 0F00000A 		.loc 1 70 0
  69:pelican_ptu.c **** 	{
  70:pelican_ptu.c **** 		CAMERA_ptu.servo_roll_offset=82000;//74000;
  69              	r2, .L6
  70 0058 80209FE5 		mov	r3, #81920
  71 005c 0539A0E3 		add	r3, r3, #80
  72 0060 503083E2 		str	r3, [r2, #0]
  73 0064 003082E5 		.loc 1 71 0
  71:pelican_ptu.c **** 		CAMERA_ptu.servo_roll_scale=220000;	//=90° 110000
  74              	r2, .L6
  75 0068 70209FE5 		mov	r3, #219136
  76 006c D63BA0E3 		add	r3, r3, #864
  77 0070 363E83E2 		str	r3, [r2, #8]
  78 0074 083082E5 		.loc 1 72 0
  72:pelican_ptu.c **** 		CAMERA_ptu.servo_roll_min=46000;//53900;
  79              	r2, .L6
  80 0078 60209FE5 		mov	r3, #45824
  81 007c B33CA0E3 		add	r3, r3, #176
  82 0080 B03083E2 		str	r3, [r2, #24]
  83 0084 183082E5 		.loc 1 73 0
  73:pelican_ptu.c **** 		CAMERA_ptu.servo_roll_max=128000;//94500;
  84              	r2, .L6
  85 0088 50209FE5 		mov	r3, #128000
  86 008c 7D3BA0E3 		str	r3, [r2, #28]
  87 0090 1C3082E5 		b	.L5
  88 0094 0E0000EA 	.L2:
  89              		.loc 1 77 0
  74:pelican_ptu.c **** 	}
  75:pelican_ptu.c **** 	else
  76:pelican_ptu.c **** 	{
  77:pelican_ptu.c **** 		CAMERA_ptu.servo_roll_offset=82000;//74000;
  90              	2, .L6
  91 0098 40209FE5 		mov	r3, #81920
  92 009c 0539A0E3 		add	r3, r3, #80
  93 00a0 503083E2 		str	r3, [r2, #0]
  94 00a4 003082E5 		.loc 1 78 0
  78:pelican_ptu.c **** 		CAMERA_ptu.servo_roll_scale=115000;	//=90° 110000
  95              	r2, .L6
  96 00a8 30209FE5 		mov	r3, #114688
  97 00ac 0739A0E3 		add	r3, r3, #312
  98 00b0 4E3F83E2 		str	r3, [r2, #8]
  99 00b4 083082E5 		.loc 1 79 0
  79:pelican_ptu.c **** 		CAMERA_ptu.servo_roll_min=46000;//53900;
 100              	r2, .L6
 101 00b8 20209FE5 		mov	r3, #45824
 102 00bc B33CA0E3 		add	r3, r3, #176
 103 00c0 B03083E2 		str	r3, [r2, #24]
 104 00c4 183082E5 		.loc 1 80 0
  80:pelican_ptu.c **** 		CAMERA_ptu.servo_roll_max=128000;//94500;
 105              	r2, .L6
 106 00c8 10209FE5 		mov	r3, #128000
 107 00cc 7D3BA0E3 		str	r3, [r2, #28]
 108 00d0 1C3082E5 	.L5:
 109              		.loc 1 83 0
  81:pelican_ptu.c **** 	}
  82:pelican_ptu.c **** #endif
  83:pelican_ptu.c **** }
 110              	sp, fp, #12
 111 00d4 0CD04BE2 		ldmfd	sp, {fp, sp, lr}
 112 00d8 00689DE8 		bx	lr
 113 00dc 1EFF2FE1 	.L7:
 114              		.align	2
 115              	.L6:
 116              		.word	CAMERA_ptu
 117 00e0 00000000 		.word	PTU_cam_option_4_version
 118 00e4 00000000 	.LFE2:
 120              		.bss
 121              		.align	2
 122 0009 000000   	cam_angle_pitch.1614:
 123              		.space	4
 124 000c 00000000 		.align	2
 125              	ptu_cnt.1610:
 126              		.space	4
 127 0010 00000000 		.text
 128              		.align	2
 129              		.global	PTU_update
 131              	PTU_update:
 132              	.LFB3:
 133              		.loc 1 87 0
  84:pelican_ptu.c **** 
  85:pelican_ptu.c **** 
  86:pelican_ptu.c **** void PTU_update(void)
  87:pelican_ptu.c **** {
 134              	erworking.
 135              		@ args = 0, pretend = 0, frame = 12
 136              		@ frame_needed = 1, uses_anonymous_args = 0
 137              		mov	ip, sp
 138 00e8 0DC0A0E1 	.LCFI3:
 139              		stmfd	sp!, {fp, ip, lr, pc}
 140 00ec 00D82DE9 	.LCFI4:
 141              		sub	fp, ip, #4
 142 00f0 04B04CE2 	.LCFI5:
 143              		sub	sp, sp, #12
 144 00f4 0CD04DE2 	.LCFI6:
 145              		.loc 1 89 0
  88:pelican_ptu.c **** 	static int ptu_cnt=0;
  89:pelican_ptu.c **** 	if(++ptu_cnt>9)	//generate 100Hz
 146              	0
 147 00f8 C8329FE5 		ldr	r3, [r3, #0]
 148 00fc 003093E5 		add	r2, r3, #1
 149 0100 012083E2 		ldr	r3, .L20
 150 0104 BC329FE5 		str	r2, [r3, #0]
 151 0108 002083E5 		ldr	r3, .L20
 152 010c B4329FE5 		ldr	r3, [r3, #0]
 153 0110 003093E5 		cmp	r3, #9
 154 0114 090053E3 		ble	.L19
 155 0118 A70000DA 	.LBB2:
 156              		.loc 1 91 0
  90:pelican_ptu.c **** 	{
  91:pelican_ptu.c **** 		ptu_cnt=0;
 157              	20
 158 011c A4229FE5 		mov	r3, #0
 159 0120 0030A0E3 		str	r3, [r2, #0]
 160 0124 003082E5 		.loc 1 93 0
  92:pelican_ptu.c **** 
  93:pelican_ptu.c **** 		if (PTU_enable_plain_ch7_to_servo)
 161              		r3, .L20+4
 162 0128 9C329FE5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 163 012c 0030D3E5 		cmp	r3, #0
 164 0130 000053E3 		beq	.L11
 165 0134 2500000A 	.LBB3:
 166              		.loc 1 97 0
  94:pelican_ptu.c **** 		{
  95:pelican_ptu.c **** 			int value;
  96:pelican_ptu.c **** 
  97:pelican_ptu.c **** 			value= 88473+(((int)RO_RC_Data.channel[4]-2048)*29491)/2048;
 167              	3, .L20+8
 168 0138 90329FE5 		ldrh	r3, [r3, #8]
 169 013c B830D3E1 		mov	r2, r3
 170 0140 0320A0E1 		mov	r3, r2
 171 0144 0230A0E1 		mov	r3, r3, asl #5
 172 0148 8332A0E1 		add	r3, r3, r2
 173 014c 023083E0 		mov	r3, r3, asl #3
 174 0150 8331A0E1 		rsb	r3, r2, r3
 175 0154 033062E0 		mov	r3, r3, asl #2
 176 0158 0331A0E1 		add	r3, r3, r2
 177 015c 023083E0 		mov	r3, r3, asl #2
 178 0160 0331A0E1 		add	r3, r3, r2
 179 0164 023083E0 		mov	r2, r3, asl #3
 180 0168 8321A0E1 		rsb	r3, r3, r2
 181 016c 023063E0 		add	r3, r3, #-67108864
 182 0170 3F3383E2 		add	r3, r3, #6684672
 183 0174 663883E2 		add	r3, r3, #26624
 184 0178 1A3B83E2 		mov	r2, r3
 185 017c 0320A0E1 		add	r3, r2, #2032
 186 0180 7F3E82E2 		add	r3, r3, #15
 187 0184 0F3083E2 		cmp	r2, #0
 188 0188 000052E3 		movlt	r2, r3
 189 018c 0320A0B1 		mov	r3, r2, asr #11
 190 0190 C235A0E1 		add	r3, r3, #88064
 191 0194 563B83E2 		add	r3, r3, #408
 192 0198 663F83E2 		add	r3, r3, #1
 193 019c 013083E2 		str	r3, [fp, #-16]
 194 01a0 10300BE5 		.loc 1 99 0
  98:pelican_ptu.c **** 
  99:pelican_ptu.c **** 		    PWMMR5 = value;
 195              	, r3, #81920
 196 01a4 0E32A0E3 		add	r3, r3, #68
 197 01a8 053983E2 		ldr	r2, [fp, #-16]
 198 01ac 443083E2 		str	r2, [r3, #0]
 199 01b0 10201BE5 		.loc 1 100 0
 200 01b4 002083E5 		mov	r3, #-536870912
 100:pelican_ptu.c **** 			PWMLER = LER5_EN|LER1_EN|LER2_EN;
 201              	3, r3, #81920
 202 01b8 0E32A0E3 		add	r3, r3, #80
 203 01bc 053983E2 		mov	r2, #38
 204 01c0 503083E2 		str	r2, [r3, #0]
 205 01c4 2620A0E3 		.loc 1 102 0
 206 01c8 002083E5 		b	.L19
 101:pelican_ptu.c **** 
 102:pelican_ptu.c **** 			return;
 207              	.LBE3:
 208 01cc 7A0000EA 		.loc 1 106 0
 209              		bl	PTU_update_middle_positions_by_stick
 210              		.loc 1 113 0
 103:pelican_ptu.c **** 		}
 104:pelican_ptu.c ****     	int angle_pitch, angle_roll;
 105:pelican_ptu.c **** 
 106:pelican_ptu.c ****     	PTU_update_middle_positions_by_stick();
 211              		r3, .L20+12
 212 01d0 FEFFFFEB 		ldr	r1, [r3, #0]
 107:pelican_ptu.c **** 
 108:pelican_ptu.c **** #ifdef CAMMOUNT_XCONFIG	//rotate pitch/roll tiltcompensation for 45°
 109:pelican_ptu.c **** #ifndef CAM_FACING_FRONT_RIGHT
 110:pelican_ptu.c ****     angle_pitch=IMU_CalcData.angle_nick*707/1000+IMU_CalcData.angle_roll*707/1000;
 111:pelican_ptu.c ****     angle_roll=IMU_CalcData.angle_roll*707/1000-IMU_CalcData.angle_nick*707/1000;
 112:pelican_ptu.c **** #else
 113:pelican_ptu.c ****     angle_roll=IMU_CalcData.angle_nick*707/1000+IMU_CalcData.angle_roll*707/1000;
 213              	ov	r3, r1
 214 01d4 F8319FE5 		mov	r3, r3, asl #2
 215 01d8 001093E5 		add	r3, r3, r1
 216 01dc 0130A0E1 		mov	r2, r3, asl #2
 217 01e0 0331A0E1 		add	r3, r3, r2
 218 01e4 013083E0 		mov	r3, r3, asl #2
 219 01e8 0321A0E1 		add	r3, r3, r1
 220 01ec 023083E0 		mov	r2, r3, asl #3
 221 01f0 0331A0E1 		rsb	r1, r3, r2
 222 01f4 013083E0 		ldr	r3, .L20+16
 223 01f8 8321A0E1 		smull	r2, r3, r1, r3
 224 01fc 021063E0 		mov	r2, r3, asr #6
 225 0200 D0319FE5 		mov	r3, r1, asr #31
 226 0204 9123C3E0 		rsb	r0, r3, r2
 227 0208 4323A0E1 		ldr	r3, .L20+12
 228 020c C13FA0E1 		ldr	r1, [r3, #4]
 229 0210 020063E0 		mov	r3, r1
 230 0214 B8319FE5 		mov	r3, r3, asl #2
 231 0218 041093E5 		add	r3, r3, r1
 232 021c 0130A0E1 		mov	r2, r3, asl #2
 233 0220 0331A0E1 		add	r3, r3, r2
 234 0224 013083E0 		mov	r3, r3, asl #2
 235 0228 0321A0E1 		add	r3, r3, r1
 236 022c 023083E0 		mov	r2, r3, asl #3
 237 0230 0331A0E1 		rsb	r1, r3, r2
 238 0234 013083E0 		ldr	r3, .L20+16
 239 0238 8321A0E1 		smull	r2, r3, r1, r3
 240 023c 021063E0 		mov	r2, r3, asr #6
 241 0240 90319FE5 		mov	r3, r1, asr #31
 242 0244 9123C3E0 		rsb	r3, r3, r2
 243 0248 4323A0E1 		add	r3, r0, r3
 244 024c C13FA0E1 		str	r3, [fp, #-20]
 245 0250 023063E0 		.loc 1 114 0
 246 0254 033080E0 		ldr	r3, .L20+12
 247 0258 14300BE5 		ldr	r2, [r3, #4]
 114:pelican_ptu.c ****     angle_pitch=-IMU_CalcData.angle_roll*707/1000+IMU_CalcData.angle_nick*707/1000;
 248              	sb	r3, r2, r3
 249 025c 70319FE5 		mov	r3, r3, asl #2
 250 0260 042093E5 		add	r3, r3, r2
 251 0264 0230A0E1 		mov	r3, r3, asl #2
 252 0268 033BA0E1 		add	r3, r3, r2
 253 026c 033062E0 		mov	r3, r3, asl #4
 254 0270 0331A0E1 		rsb	r3, r2, r3
 255 0274 023083E0 		mov	r3, r3, asl #2
 256 0278 0331A0E1 		add	r1, r3, r2
 257 027c 023083E0 		ldr	r3, .L20+16
 258 0280 0332A0E1 		smull	r2, r3, r1, r3
 259 0284 033062E0 		mov	r2, r3, asr #6
 260 0288 0331A0E1 		mov	r3, r1, asr #31
 261 028c 021083E0 		rsb	r0, r3, r2
 262 0290 40319FE5 		ldr	r3, .L20+12
 263 0294 9123C3E0 		ldr	r1, [r3, #0]
 264 0298 4323A0E1 		mov	r3, r1
 265 029c C13FA0E1 		mov	r3, r3, asl #2
 266 02a0 020063E0 		add	r3, r3, r1
 267 02a4 28319FE5 		mov	r2, r3, asl #2
 268 02a8 001093E5 		add	r3, r3, r2
 269 02ac 0130A0E1 		mov	r3, r3, asl #2
 270 02b0 0331A0E1 		add	r3, r3, r1
 271 02b4 013083E0 		mov	r2, r3, asl #3
 272 02b8 0321A0E1 		rsb	r1, r3, r2
 273 02bc 023083E0 		ldr	r3, .L20+16
 274 02c0 0331A0E1 		smull	r2, r3, r1, r3
 275 02c4 013083E0 		mov	r2, r3, asr #6
 276 02c8 8321A0E1 		mov	r3, r1, asr #31
 277 02cc 021063E0 		rsb	r3, r3, r2
 278 02d0 00319FE5 		add	r3, r0, r3
 279 02d4 9123C3E0 		str	r3, [fp, #-24]
 280 02d8 4323A0E1 		.loc 1 127 0
 281 02dc C13FA0E1 		ldr	r3, .L20+20
 282 02e0 023063E0 		ldr	r2, [r3, #4]
 283 02e4 033080E0 		ldr	r3, .L20+24
 284 02e8 18300BE5 		str	r2, [r3, #0]
 115:pelican_ptu.c **** #endif
 116:pelican_ptu.c **** #else
 117:pelican_ptu.c ****     angle_pitch=IMU_CalcData.angle_nick;
 118:pelican_ptu.c ****     angle_roll=IMU_CalcData.angle_roll;
 119:pelican_ptu.c **** #endif
 120:pelican_ptu.c **** 		static int cam_angle_pitch=0;
 121:pelican_ptu.c **** #ifdef SET_CAMERA_ANGLE_INCREMENTAL
 122:pelican_ptu.c **** 		if(LL_1khz_attitude_data.RC_data[4]>192) cam_angle_pitch+=200;
 123:pelican_ptu.c **** 		else if(LL_1khz_attitude_data.RC_data[4]<64) cam_angle_pitch-=200;
 124:pelican_ptu.c **** 		if(cam_angle_pitch>55000) cam_angle_pitch=55000;
 125:pelican_ptu.c **** 		if(cam_angle_pitch<-55000) cam_angle_pitch=-55000;
 126:pelican_ptu.c **** #else
 127:pelican_ptu.c **** 		cam_angle_pitch=CAMERA_Commands.desired_angle_pitch;
 285              	2, [r3, #0]
 286 02ec E8309FE5 		mvn	r3, #89088
 287 02f0 042093E5 		sub	r3, r3, #908
 288 02f4 E4309FE5 		sub	r3, r3, #3
 289 02f8 002083E5 		cmp	r2, r3
 128:pelican_ptu.c **** 		if(cam_angle_pitch<-90000) cam_angle_pitch=-90000;
 290              	.L13
 291 02fc DC309FE5 		ldr	r2, .L20+24
 292 0300 002093E5 		mvn	r3, #89088
 293 0304 573BE0E3 		sub	r3, r3, #908
 294 0308 E33F43E2 		sub	r3, r3, #3
 295 030c 033043E2 		str	r3, [r2, #0]
 296 0310 030052E1 		b	.L15
 297 0314 050000AA 	.L13:
 298 0318 C0209FE5 		.loc 1 129 0
 299 031c 573BE0E3 		ldr	r3, .L20+24
 300 0320 E33F43E2 		ldr	r3, [r3, #0]
 301 0324 033043E2 		cmp	r3, #0
 302 0328 003082E5 		ble	.L15
 303 032c 060000EA 		ldr	r2, .L20+24
 304              		mov	r3, #0
 129:pelican_ptu.c **** 		else if(cam_angle_pitch>0) cam_angle_pitch=0;
 305              	0]
 306 0330 A8309FE5 	.L15:
 307 0334 003093E5 		.loc 1 131 0
 308 0338 000053E3 		ldr	r3, .L20+20
 309 033c 020000DA 		ldrh	r3, [r3, #0]
 310 0340 98209FE5 		and	r3, r3, #2
 311 0344 0030A0E3 		cmp	r3, #0
 312 0348 003082E5 		beq	.L17
 313              		.loc 1 133 0
 130:pelican_ptu.c **** #endif
 131:pelican_ptu.c **** 		if(CAMERA_Commands.status&0x02)	//no tilt compensation
 314              	.L20+24
 315 034c 88309FE5 		ldr	r3, [r3, #0]
 316 0350 B030D3E1 		mov	r0, r3
 317 0354 023003E2 		bl	SERVO_pitch_move
 318 0358 000053E3 		.loc 1 134 0
 319 035c 0900000A 		ldr	r3, .L20+20
 132:pelican_ptu.c **** 		{
 133:pelican_ptu.c **** 			SERVO_pitch_move((CAMERA_OFFSET_HUMMINGBIRD_PITCH+cam_angle_pitch)*HUMMINGBIRD_SERVO_DIRECTION_P
 320              	3, [r3, #8]
 321 0360 78309FE5 		rsb	r3, r3, #0
 322 0364 003093E5 		mov	r0, r3
 323 0368 0300A0E1 		bl	SERVO_roll_move
 324 036c FEFFFFEB 		b	.L19
 134:pelican_ptu.c **** 			SERVO_roll_move((CAMERA_OFFSET_HUMMINGBIRD_ROLL+CAMERA_Commands.desired_angle_roll)*HUMMINGBIRD_
 325              	
 326 0370 64309FE5 		.loc 1 138 0
 327 0374 083093E5 		ldr	r3, .L20+24
 328 0378 003063E2 		ldr	r2, [r3, #0]
 329 037c 0300A0E1 		ldr	r3, [fp, #-24]
 330 0380 FEFFFFEB 		add	r3, r2, r3
 331 0384 0C0000EA 		mov	r0, r3
 332              		bl	SERVO_pitch_move
 135:pelican_ptu.c **** 		}
 136:pelican_ptu.c **** 		else
 137:pelican_ptu.c **** 		{
 138:pelican_ptu.c **** 			SERVO_pitch_move((CAMERA_OFFSET_HUMMINGBIRD_PITCH+cam_angle_pitch+angle_pitch)*HUMMINGBIRD_SERVO
 333              	 139 0
 334 0388 50309FE5 		ldr	r3, .L20+20
 335 038c 002093E5 		ldr	r2, [r3, #8]
 336 0390 18301BE5 		ldr	r3, [fp, #-20]
 337 0394 033082E0 		add	r3, r2, r3
 338 0398 0300A0E1 		rsb	r3, r3, #0
 339 039c FEFFFFEB 		mov	r0, r3
 139:pelican_ptu.c **** 			SERVO_roll_move((CAMERA_OFFSET_HUMMINGBIRD_ROLL+CAMERA_Commands.desired_angle_roll+angle_roll)*H
 340              	VO_roll_move
 341 03a0 34309FE5 	.L19:
 342 03a4 082093E5 	.LBE2:
 343 03a8 14301BE5 		.loc 1 142 0
 344 03ac 033082E0 		sub	sp, fp, #12
 345 03b0 003063E2 		ldmfd	sp, {fp, sp, lr}
 346 03b4 0300A0E1 		bx	lr
 347 03b8 FEFFFFEB 	.L21:
 348              		.align	2
 349              	.L20:
 140:pelican_ptu.c **** 		}
 141:pelican_ptu.c **** 	}
 142:pelican_ptu.c **** }
 350              	_cnt.1610
 351 03bc 0CD04BE2 		.word	PTU_enable_plain_ch7_to_servo
 352 03c0 00689DE8 		.word	RO_RC_Data
 353 03c4 1EFF2FE1 		.word	IMU_CalcData
 354              		.word	274877907
 355              		.word	CAMERA_Commands
 356              		.word	cam_angle_pitch.1614
 357 03c8 10000000 	.LFE3:
 359 03d0 00000000 		.align	2
 360 03d4 00000000 		.global	SERVO_pitch_move
 362 03dc 00000000 	SERVO_pitch_move:
 363 03e0 0C000000 	.LFB4:
 364              		.loc 1 146 0
 365              		@ Function supports interworking.
 366              		@ args = 0, pretend = 0, frame = 8
 367              		@ frame_needed = 1, uses_anonymous_args = 0
 368              		mov	ip, sp
 369              	.LCFI7:
 370              		stmfd	sp!, {fp, ip, lr, pc}
 143:pelican_ptu.c **** 
 144:pelican_ptu.c **** 
 145:pelican_ptu.c **** void SERVO_pitch_move (int angle)
 146:pelican_ptu.c **** {
 371              	#4
 372              	.LCFI9:
 373              		sub	sp, sp, #8
 374              	.LCFI10:
 375 03e4 0DC0A0E1 		str	r0, [fp, #-20]
 376              		.loc 1 148 0
 377 03e8 00D82DE9 		ldr	r3, .L28
 378              		ldr	r0, [r3, #4]
 379 03ec 04B04CE2 		ldr	r1, [fp, #-20]
 380              		ldr	r3, .L28+4
 381 03f0 08D04DE2 		smull	r2, r3, r1, r3
 382              		mov	r2, r3, asr #2
 383 03f4 14000BE5 		mov	r3, r1, asr #31
 147:pelican_ptu.c ****     unsigned int value;
 148:pelican_ptu.c ****     value=CAMERA_ptu.servo_pitch_offset+(angle/10)*CAMERA_ptu.servo_pitch_scale/9000;	//9000
 384              	r2
 385 03f8 C0309FE5 		ldr	r3, .L28
 386 03fc 040093E5 		ldr	r3, [r3, #12]
 387 0400 14101BE5 		mul	r1, r3, r2
 388 0404 B8309FE5 		ldr	r3, .L28+8
 389 0408 9123C3E0 		smull	r2, r3, r1, r3
 390 040c 4321A0E1 		mov	r2, r3, asr #12
 391 0410 C13FA0E1 		mov	r3, r1, asr #31
 392 0414 022063E0 		rsb	r3, r3, r2
 393 0418 A0309FE5 		add	r3, r0, r3
 394 041c 0C3093E5 		str	r3, [fp, #-16]
 395 0420 930201E0 		.loc 1 150 0
 396 0424 9C309FE5 		ldr	r3, .L28
 397 0428 9123C3E0 		ldr	r3, [r3, #20]
 398 042c 4326A0E1 		mov	r2, r3
 399 0430 C13FA0E1 		ldr	r3, [fp, #-16]
 400 0434 023063E0 		cmp	r2, r3
 401 0438 033080E0 		bcs	.L23
 402 043c 10300BE5 		ldr	r3, .L28
 149:pelican_ptu.c **** 
 150:pelican_ptu.c ****     if(value>CAMERA_ptu.servo_pitch_max) value=CAMERA_ptu.servo_pitch_max;
 403              		str	r3, [fp, #-16]
 404 0440 78309FE5 		b	.L25
 405 0444 143093E5 	.L23:
 406 0448 0320A0E1 		.loc 1 151 0
 407 044c 10301BE5 		ldr	r3, .L28
 408 0450 030052E1 		ldr	r3, [r3, #16]
 409 0454 0300002A 		mov	r2, r3
 410 0458 60309FE5 		ldr	r3, [fp, #-16]
 411 045c 143093E5 		cmp	r2, r3
 412 0460 10300BE5 		bls	.L25
 413 0464 080000EA 		ldr	r3, .L28
 414              		ldr	r3, [r3, #16]
 151:pelican_ptu.c ****     else if(value<CAMERA_ptu.servo_pitch_min) value=CAMERA_ptu.servo_pitch_min;
 415              	, #-16]
 416 0468 50309FE5 	.L25:
 417 046c 103093E5 		.loc 1 153 0
 418 0470 0320A0E1 		mov	r3, #-536870912
 419 0474 10301BE5 		add	r3, r3, #81920
 420 0478 030052E1 		add	r3, r3, #68
 421 047c 0200009A 		ldr	r2, [fp, #-16]
 422 0480 38309FE5 		str	r2, [r3, #0]
 423 0484 103093E5 		.loc 1 154 0
 424 0488 10300BE5 		mov	r3, #-536870912
 425              		add	r3, r3, #81920
 152:pelican_ptu.c **** 
 153:pelican_ptu.c ****     PWMMR5 = value;
 426              	, #80
 427 048c 0E32A0E3 		mov	r2, #38
 428 0490 053983E2 		str	r2, [r3, #0]
 429 0494 443083E2 		.loc 1 155 0
 430 0498 10201BE5 		sub	sp, fp, #12
 431 049c 002083E5 		ldmfd	sp, {fp, sp, lr}
 154:pelican_ptu.c ****     PWMLER = LER5_EN|LER1_EN|LER2_EN;
 432              	
 433 04a0 0E32A0E3 	.L29:
 434 04a4 053983E2 		.align	2
 435 04a8 503083E2 	.L28:
 436 04ac 2620A0E3 		.word	CAMERA_ptu
 437 04b0 002083E5 		.word	1717986919
 155:pelican_ptu.c **** }
 438              	d	1954687339
 439 04b4 0CD04BE2 	.LFE4:
 441 04bc 1EFF2FE1 		.align	2
 442              		.global	SERVO_roll_move
 444              	SERVO_roll_move:
 445 04c0 00000000 	.LFB5:
 446 04c4 67666666 		.loc 1 158 0
 447 04c8 6B298274 		@ Function supports interworking.
 448              		@ args = 0, pretend = 0, frame = 8
 449              		@ frame_needed = 1, uses_anonymous_args = 0
 450              		mov	ip, sp
 451              	.LCFI11:
 452              		stmfd	sp!, {fp, ip, lr, pc}
 453              	.LCFI12:
 454              		sub	fp, ip, #4
 156:pelican_ptu.c **** 
 157:pelican_ptu.c **** void SERVO_roll_move (int angle)
 158:pelican_ptu.c **** {
 455              	 sp, #8
 456              	.LCFI14:
 457              		str	r0, [fp, #-20]
 458              		.loc 1 160 0
 459 04cc 0DC0A0E1 		ldr	r3, .L36
 460              		ldr	r0, [r3, #0]
 461 04d0 00D82DE9 		ldr	r1, [fp, #-20]
 462              		ldr	r3, .L36+4
 463 04d4 04B04CE2 		smull	r2, r3, r1, r3
 464              		mov	r2, r3, asr #2
 465 04d8 08D04DE2 		mov	r3, r1, asr #31
 466              		rsb	r2, r3, r2
 467 04dc 14000BE5 		ldr	r3, .L36
 159:pelican_ptu.c ****     int value;
 160:pelican_ptu.c ****     value=CAMERA_ptu.servo_roll_offset+(angle/10)*CAMERA_ptu.servo_roll_scale/9000;	//9000
 468              	 #8]
 469 04e0 B8309FE5 		mul	r1, r3, r2
 470 04e4 000093E5 		ldr	r3, .L36+8
 471 04e8 14101BE5 		smull	r2, r3, r1, r3
 472 04ec B0309FE5 		mov	r2, r3, asr #12
 473 04f0 9123C3E0 		mov	r3, r1, asr #31
 474 04f4 4321A0E1 		rsb	r3, r3, r2
 475 04f8 C13FA0E1 		add	r3, r0, r3
 476 04fc 022063E0 		str	r3, [fp, #-16]
 477 0500 98309FE5 		.loc 1 162 0
 478 0504 083093E5 		ldr	r3, .L36
 479 0508 930201E0 		ldr	r2, [r3, #28]
 480 050c 94309FE5 		ldr	r3, [fp, #-16]
 481 0510 9123C3E0 		cmp	r2, r3
 482 0514 4326A0E1 		bge	.L31
 483 0518 C13FA0E1 		ldr	r3, .L36
 484 051c 023063E0 		ldr	r3, [r3, #28]
 485 0520 033080E0 		str	r3, [fp, #-16]
 486 0524 10300BE5 		b	.L33
 161:pelican_ptu.c **** 
 162:pelican_ptu.c ****     if(value>CAMERA_ptu.servo_roll_max) value=CAMERA_ptu.servo_roll_max;
 487              	
 488 0528 70309FE5 		ldr	r3, .L36
 489 052c 1C2093E5 		ldr	r2, [r3, #24]
 490 0530 10301BE5 		ldr	r3, [fp, #-16]
 491 0534 030052E1 		cmp	r2, r3
 492 0538 030000AA 		ble	.L33
 493 053c 5C309FE5 		ldr	r3, .L36
 494 0540 1C3093E5 		ldr	r3, [r3, #24]
 495 0544 10300BE5 		str	r3, [fp, #-16]
 496 0548 070000EA 	.L33:
 497              		.loc 1 166 0
 163:pelican_ptu.c ****     else if(value<CAMERA_ptu.servo_roll_min) value=CAMERA_ptu.servo_roll_min;
 498              	-536870912
 499 054c 4C309FE5 		add	r3, r3, #81920
 500 0550 182093E5 		add	r3, r3, #32
 501 0554 10301BE5 		ldr	r2, [fp, #-16]
 502 0558 030052E1 		str	r2, [r3, #0]
 503 055c 020000DA 		.loc 1 170 0
 504 0560 38309FE5 		mov	r3, #-536870912
 505 0564 183093E5 		add	r3, r3, #81920
 506 0568 10300BE5 		add	r3, r3, #80
 507              		mov	r2, #38
 164:pelican_ptu.c **** 
 165:pelican_ptu.c **** #ifdef HUMMINGBIRD_ROLL_SERVO_ON_SSEL0
 166:pelican_ptu.c ****     PWMMR2 = value;
 508              	r3, #0]
 509 056c 0E32A0E3 		.loc 1 171 0
 510 0570 053983E2 		sub	sp, fp, #12
 511 0574 203083E2 		ldmfd	sp, {fp, sp, lr}
 512 0578 10201BE5 		bx	lr
 513 057c 002083E5 	.L37:
 167:pelican_ptu.c **** #else
 168:pelican_ptu.c ****     PWMMR1 = value;
 169:pelican_ptu.c **** #endif
 170:pelican_ptu.c ****     PWMLER = LER5_EN|LER1_EN|LER2_EN;
 514              	n	2
 515 0580 0E32A0E3 	.L36:
 516 0584 053983E2 		.word	CAMERA_ptu
 517 0588 503083E2 		.word	1717986919
 518 058c 2620A0E3 		.word	1954687339
 519 0590 002083E5 	.LFE5:
 171:pelican_ptu.c **** }
 520              		SERVO_roll_move, .-SERVO_roll_move
 521 0594 0CD04BE2 		.bss
 522 0598 00689DE8 		.align	2
 523 059c 1EFF2FE1 	reset_timeout_pitch.1718:
 524              		.space	4
 525              	pitch_offset_changed.1717:
 526              		.space	1
 527 05a0 00000000 		.align	2
 528 05a4 67666666 	reset_timeout_roll.1713:
 529 05a8 6B298274 		.space	4
 530              	roll_offset_changed.1712:
 531              		.space	1
 532              		.text
 533              		.align	2
 534              		.global	PTU_update_middle_positions_by_stick
 536              	PTU_update_middle_positions_by_stick:
 537 0018 00       	.LFB6:
 538 0019 000000   		.loc 1 174 0
 539              		@ Function supports interworking.
 540 001c 00000000 		@ args = 0, pretend = 0, frame = 8
 541              		@ frame_needed = 1, uses_anonymous_args = 0
 542 0020 00       		mov	ip, sp
 543 0021 000000   	.LCFI15:
 544              		stmfd	sp!, {fp, ip, lr, pc}
 545              	.LCFI16:
 546              		sub	fp, ip, #4
 547              	.LCFI17:
 548              		sub	sp, sp, #8
 172:pelican_ptu.c **** 
 173:pelican_ptu.c **** void PTU_update_middle_positions_by_stick(void)
 174:pelican_ptu.c **** {
 549              	3, #0
 550              		str	r3, [fp, #-20]
 551              		.loc 1 180 0
 552              		ldr	r3, .L76
 553 05ac 0DC0A0E1 		ldrh	r3, [r3, #90]
 554              		mov	r3, r3, asl #16
 555 05b0 00D82DE9 		mov	r3, r3, lsr #16
 556              		and	r3, r3, #1
 557 05b4 04B04CE2 		cmp	r3, #0
 558              		bne	.L39
 559 05b8 08D04DE2 		.loc 1 182 0
 560              		ldr	r3, .L76+4
 175:pelican_ptu.c **** 	#define THRESHOLD 10
 176:pelican_ptu.c **** 	//set roll offset
 177:pelican_ptu.c **** 	int roll_offset_inc=0;
 561              	, #0]
 562 05bc 0030A0E3 		cmp	r3, #0
 563 05c0 14300BE5 		beq	.L41
 178:pelican_ptu.c **** 	static unsigned char roll_offset_changed=0;
 179:pelican_ptu.c **** 	static int reset_timeout_roll=0;
 180:pelican_ptu.c **** 	if(!(LL_1khz_attitude_data.status2&0x01)) //flying?
 564              	oc 1 184 0
 565 05c4 04339FE5 		ldr	r3, .L76+4
 566 05c8 BA35D3E1 		ldr	r3, [r3, #0]
 567 05cc 0338A0E1 		sub	r2, r3, #1
 568 05d0 2338A0E1 		ldr	r3, .L76+4
 569 05d4 013003E2 		str	r2, [r3, #0]
 570 05d8 000053E3 		b	.L39
 571 05dc 5700001A 	.L41:
 181:pelican_ptu.c **** 	{
 182:pelican_ptu.c **** 		if(reset_timeout_roll)
 572              	188 0
 573 05e0 EC329FE5 		ldr	r3, .L76
 574 05e4 003093E5 		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 575 05e8 000053E3 		cmp	r3, #240
 576 05ec 0500000A 		bls	.L43
 183:pelican_ptu.c **** 		{
 184:pelican_ptu.c **** 			reset_timeout_roll--;
 577              	 1 191 0
 578 05f0 DC329FE5 		ldr	r3, .L76
 579 05f4 003093E5 		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 580 05f8 012043E2 		cmp	r3, #138
 581 05fc D0329FE5 		bls	.L45
 582 0600 002083E5 		ldr	r3, .L76
 583 0604 4D0000EA 		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 584              		sub	r2, r3, #138
 185:pelican_ptu.c **** 		}
 186:pelican_ptu.c **** 		else
 187:pelican_ptu.c **** 		{
 188:pelican_ptu.c **** 			if(LL_1khz_attitude_data.RC_data[2]>240)	//pitch stick at maximum
 585              	 .L76+8
 586 0608 C0329FE5 		smull	r0, r1, r3, r2
 587 060c 1030D3E5 		mov	r3, r2, asr #31
 588 0610 F00053E3 		rsb	r3, r3, r1
 589 0614 4000009A 		str	r3, [fp, #-20]
 189:pelican_ptu.c **** 			{
 190:pelican_ptu.c **** 				//use roll-stick to change roll servo offset
 191:pelican_ptu.c **** 				if(LL_1khz_attitude_data.RC_data[1]>128+THRESHOLD) roll_offset_inc=(LL_1khz_attitude_data.RC_da
 590              	47
 591 0618 B0329FE5 	.L45:
 592 061c 0F30D3E5 		.loc 1 192 0
 593 0620 8A0053E3 		ldr	r3, .L76
 594 0624 0800009A 		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 595 0628 A0329FE5 		cmp	r3, #117
 596 062c 0F30D3E5 		bhi	.L48
 597 0630 8A2043E2 		ldr	r3, .L76
 598 0634 9C329FE5 		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 599 0638 9302C1E0 		sub	r2, r3, #118
 600 063c C23FA0E1 		ldr	r3, .L76+8
 601 0640 013063E0 		smull	r0, r1, r3, r2
 602 0644 14300BE5 		mov	r3, r2, asr #31
 603 0648 0E0000EA 		rsb	r3, r3, r1
 604              		str	r3, [fp, #-20]
 192:pelican_ptu.c **** 				else if(LL_1khz_attitude_data.RC_data[1]<128-THRESHOLD) roll_offset_inc=(LL_1khz_attitude_data.
 605              	.loc 1 193 0
 606 064c 7C329FE5 		mov	r3, #0
 607 0650 0F30D3E5 		str	r3, [fp, #-20]
 608 0654 750053E3 	.L47:
 609 0658 0800008A 		.loc 1 195 0
 610 065c 6C329FE5 		ldr	r3, .L76+12
 611 0660 0F30D3E5 		ldr	r2, [r3, #0]
 612 0664 762043E2 		ldr	r3, [fp, #-20]
 613 0668 68329FE5 		add	r2, r2, r3
 614 066c 9302C1E0 		ldr	r3, .L76+12
 615 0670 C23FA0E1 		str	r2, [r3, #0]
 616 0674 013063E0 		.loc 1 196 0
 617 0678 14300BE5 		ldr	r3, .L76+12
 618 067c 010000EA 		ldr	r2, [r3, #0]
 619              		mov	r3, #19968
 193:pelican_ptu.c **** 				else roll_offset_inc=0;
 620              	2
 621 0680 0030A0E3 		cmp	r2, r3
 622 0684 14300BE5 		ble	.L50
 623              		.loc 1 197 0
 194:pelican_ptu.c **** 
 195:pelican_ptu.c **** 				PTU_cam_angle_roll_offset+=roll_offset_inc;//(LL_1khz_attitude_data.RC_data[3]-128)*5;
 624              		r2, .L76+12
 625 0688 4C329FE5 		mov	r3, #0
 626 068c 002093E5 		str	r3, [r2, #0]
 627 0690 14301BE5 		.loc 1 198 0
 628 0694 032082E0 		ldr	r2, .L76+4
 629 0698 3C329FE5 		mov	r3, #1000
 630 069c 002083E5 		str	r3, [r2, #0]
 196:pelican_ptu.c **** 				if (PTU_cam_angle_roll_offset>20000){
 631              	.loc 1 200 0
 632 06a0 34329FE5 		ldr	r3, .L76+12
 633 06a4 002093E5 		ldr	r2, [r3, #0]
 634 06a8 4E3CA0E3 		mvn	r3, #19968
 635 06ac 203083E2 		sub	r3, r3, #31
 636 06b0 030052E1 		cmp	r2, r3
 637 06b4 050000DA 		bge	.L52
 197:pelican_ptu.c **** 					PTU_cam_angle_roll_offset=0;
 638              	 201 0
 639 06b8 1C229FE5 		ldr	r2, .L76+12
 640 06bc 0030A0E3 		mov	r3, #0
 641 06c0 003082E5 		str	r3, [r2, #0]
 198:pelican_ptu.c **** 					reset_timeout_roll=1000;
 642              	c 1 202 0
 643 06c4 08229FE5 		ldr	r2, .L76+4
 644 06c8 FA3FA0E3 		mov	r3, #1000
 645 06cc 003082E5 		str	r3, [r2, #0]
 646              	.L52:
 199:pelican_ptu.c **** 				}
 200:pelican_ptu.c **** 				if (PTU_cam_angle_roll_offset<-20000){
 647              	 1 204 0
 648 06d0 04329FE5 		ldr	r3, [fp, #-20]
 649 06d4 002093E5 		cmp	r3, #0
 650 06d8 4E3CE0E3 		beq	.L39
 651 06dc 1F3043E2 		ldr	r3, .L76+16
 652 06e0 030052E1 		mov	r2, #1
 653 06e4 050000AA 		strb	r2, [r3, #0]
 201:pelican_ptu.c **** 					PTU_cam_angle_roll_offset=0;
 654              	
 655 06e8 EC219FE5 	.L43:
 656 06ec 0030A0E3 		.loc 1 207 0
 657 06f0 003082E5 		ldr	r3, .L76+16
 202:pelican_ptu.c **** 					reset_timeout_roll=1000;
 658              	rb	r3, [r3, #0]	@ zero_extendqisi2
 659 06f4 D8219FE5 		cmp	r3, #0
 660 06f8 FA3FA0E3 		beq	.L39
 661 06fc 003082E5 		.loc 1 209 0
 662              		ldr	r3, .L76+16
 203:pelican_ptu.c **** 				}
 204:pelican_ptu.c **** 				if(roll_offset_inc) roll_offset_changed=1;
 663              	r2, #0
 664 0700 14301BE5 		strb	r2, [r3, #0]
 665 0704 000053E3 		.loc 1 211 0
 666 0708 0C00000A 		bl	lpc_aci_SavePara
 667 070c CC319FE5 		.loc 1 212 0
 668 0710 0120A0E3 		bl	lpc_aci_WriteParatoFlash
 669 0714 0020C3E5 	.L39:
 670 0718 080000EA 		.loc 1 220 0
 671              		mov	r3, #0
 205:pelican_ptu.c **** 			}else
 206:pelican_ptu.c **** 			{
 207:pelican_ptu.c **** 				if (roll_offset_changed)
 672              	[fp, #-16]
 673 071c BC319FE5 		.loc 1 223 0
 674 0720 0030D3E5 		ldr	r3, .L76
 675 0724 000053E3 		ldrh	r3, [r3, #90]
 676 0728 0400000A 		mov	r3, r3, asl #16
 208:pelican_ptu.c **** 				{
 209:pelican_ptu.c **** 					roll_offset_changed=0;
 677              	r3, r3, lsr #16
 678 072c AC319FE5 		and	r3, r3, #1
 679 0730 0020A0E3 		cmp	r3, #0
 680 0734 0020C3E5 		bne	.L75
 210:pelican_ptu.c **** 
 211:pelican_ptu.c **** 					lpc_aci_SavePara();
 681              	c 1 225 0
 682 0738 FEFFFFEB 		ldr	r3, .L76+20
 212:pelican_ptu.c **** 					lpc_aci_WriteParatoFlash();
 683              	dr	r3, [r3, #0]
 684 073c FEFFFFEB 		cmp	r3, #0
 685              		beq	.L59
 213:pelican_ptu.c **** 
 214:pelican_ptu.c **** 				}
 215:pelican_ptu.c **** 			}
 216:pelican_ptu.c **** 		}
 217:pelican_ptu.c **** 	}
 218:pelican_ptu.c **** 
 219:pelican_ptu.c **** 	//set pitch offset
 220:pelican_ptu.c **** 	int pitch_offset_inc=0;
 686              	oc 1 227 0
 687 0740 0030A0E3 		ldr	r3, .L76+20
 688 0744 10300BE5 		ldr	r3, [r3, #0]
 221:pelican_ptu.c **** 	static unsigned char pitch_offset_changed=0;
 222:pelican_ptu.c **** 	static int reset_timeout_pitch;
 223:pelican_ptu.c **** 	if(!(LL_1khz_attitude_data.status2&0x01)) //flying?
 689              	b	r2, r3, #1
 690 0748 80319FE5 		ldr	r3, .L76+20
 691 074c BA35D3E1 		str	r2, [r3, #0]
 692 0750 0338A0E1 		b	.L75
 693 0754 2338A0E1 	.L59:
 694 0758 013003E2 		.loc 1 231 0
 695 075c 000053E3 		ldr	r3, .L76
 696 0760 5700001A 		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 224:pelican_ptu.c **** 	{
 225:pelican_ptu.c **** 		if(reset_timeout_pitch)
 697              	 #240
 698 0764 78319FE5 		bls	.L61
 699 0768 003093E5 		.loc 1 234 0
 700 076c 000053E3 		ldr	r3, .L76
 701 0770 0500000A 		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 226:pelican_ptu.c **** 		{
 227:pelican_ptu.c **** 			reset_timeout_pitch--;
 702              	r3, #138
 703 0774 68319FE5 		bls	.L63
 704 0778 003093E5 		ldr	r3, .L76
 705 077c 012043E2 		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 706 0780 5C319FE5 		sub	r3, r3, #138
 707 0784 002083E5 		add	r2, r3, #3
 708 0788 4D0000EA 		cmp	r3, #0
 709              		movlt	r3, r2
 228:pelican_ptu.c **** 		}
 229:pelican_ptu.c **** 		else
 230:pelican_ptu.c **** 		{
 231:pelican_ptu.c **** 			if(LL_1khz_attitude_data.RC_data[2]>240)	//pitch stick at maximum
 710              	 r3, asr #2
 711 078c 3C319FE5 		str	r3, [fp, #-16]
 712 0790 1030D3E5 		b	.L65
 713 0794 F00053E3 	.L63:
 714 0798 4000009A 		.loc 1 235 0
 232:pelican_ptu.c **** 			{
 233:pelican_ptu.c **** 				//use pitch-stick to change pitch servo offset
 234:pelican_ptu.c **** 				if(LL_1khz_attitude_data.RC_data[0]>128+THRESHOLD) pitch_offset_inc=(LL_1khz_attitude_data.RC_d
 715              	r3, .L76
 716 079c 2C319FE5 		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 717 07a0 0E30D3E5 		cmp	r3, #117
 718 07a4 8A0053E3 		bhi	.L66
 719 07a8 0800009A 		ldr	r3, .L76
 720 07ac 1C319FE5 		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 721 07b0 0E30D3E5 		sub	r3, r3, #118
 722 07b4 8A3043E2 		add	r2, r3, #3
 723 07b8 032083E2 		cmp	r3, #0
 724 07bc 000053E3 		movlt	r3, r2
 725 07c0 0230A0B1 		mov	r3, r3, asr #2
 726 07c4 4331A0E1 		str	r3, [fp, #-16]
 727 07c8 10300BE5 		b	.L65
 728 07cc 0E0000EA 	.L66:
 729              		.loc 1 236 0
 235:pelican_ptu.c **** 				else if(LL_1khz_attitude_data.RC_data[0]<128-THRESHOLD) pitch_offset_inc=(LL_1khz_attitude_data
 730              	r	r3, [fp, #-16]
 731 07d0 F8309FE5 	.L65:
 732 07d4 0E30D3E5 		.loc 1 238 0
 733 07d8 750053E3 		ldr	r3, .L76+24
 734 07dc 0800008A 		ldr	r2, [r3, #0]
 735 07e0 E8309FE5 		ldr	r3, [fp, #-16]
 736 07e4 0E30D3E5 		add	r2, r2, r3
 737 07e8 763043E2 		ldr	r3, .L76+24
 738 07ec 032083E2 		str	r2, [r3, #0]
 739 07f0 000053E3 		.loc 1 239 0
 740 07f4 0230A0B1 		ldr	r3, .L76+24
 741 07f8 4331A0E1 		ldr	r2, [r3, #0]
 742 07fc 10300BE5 		mov	r3, #19968
 743 0800 010000EA 		add	r3, r3, #32
 744              		cmp	r2, r3
 236:pelican_ptu.c **** 				else pitch_offset_inc=0;
 745              	 1 240 0
 746 0804 0030A0E3 		ldr	r2, .L76+24
 747 0808 10300BE5 		mov	r3, #0
 748              		str	r3, [r2, #0]
 237:pelican_ptu.c **** 
 238:pelican_ptu.c **** 				PTU_cam_angle_pitch_offset+=pitch_offset_inc;//(LL_1khz_attitude_data.RC_data[3]-128)*5;
 749              	c 1 241 0
 750 080c D4309FE5 		ldr	r2, .L76+20
 751 0810 002093E5 		mov	r3, #1000
 752 0814 10301BE5 		str	r3, [r2, #0]
 753 0818 032082E0 	.L68:
 754 081c C4309FE5 		.loc 1 243 0
 755 0820 002083E5 		ldr	r3, .L76+24
 239:pelican_ptu.c **** 				if (PTU_cam_angle_pitch_offset>20000){
 756              	, [r3, #0]
 757 0824 BC309FE5 		mvn	r3, #19968
 758 0828 002093E5 		sub	r3, r3, #31
 759 082c 4E3CA0E3 		cmp	r2, r3
 760 0830 203083E2 		bge	.L70
 761 0834 030052E1 		.loc 1 244 0
 762 0838 050000DA 		ldr	r2, .L76+24
 240:pelican_ptu.c **** 					PTU_cam_angle_pitch_offset=0;
 763              	, #0
 764 083c A4209FE5 		str	r3, [r2, #0]
 765 0840 0030A0E3 		.loc 1 245 0
 766 0844 003082E5 		ldr	r2, .L76+20
 241:pelican_ptu.c **** 					reset_timeout_pitch=1000;
 767              		r3, #1000
 768 0848 94209FE5 		str	r3, [r2, #0]
 769 084c FA3FA0E3 	.L70:
 770 0850 003082E5 		.loc 1 247 0
 771              		ldr	r3, [fp, #-16]
 242:pelican_ptu.c **** 				}
 243:pelican_ptu.c **** 				if (PTU_cam_angle_pitch_offset<-20000){
 772              	r3, #0
 773 0854 8C309FE5 		beq	.L75
 774 0858 002093E5 		ldr	r3, .L76+28
 775 085c 4E3CE0E3 		mov	r2, #1
 776 0860 1F3043E2 		strb	r2, [r3, #0]
 777 0864 030052E1 		b	.L75
 778 0868 050000AA 	.L61:
 244:pelican_ptu.c **** 					PTU_cam_angle_pitch_offset=0;
 779              	 250 0
 780 086c 74209FE5 		ldr	r3, .L76+28
 781 0870 0030A0E3 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 782 0874 003082E5 		cmp	r3, #0
 245:pelican_ptu.c **** 					reset_timeout_pitch=1000;
 783              		.L75
 784 0878 64209FE5 		.loc 1 252 0
 785 087c FA3FA0E3 		ldr	r3, .L76+28
 786 0880 003082E5 		mov	r2, #0
 787              		strb	r2, [r3, #0]
 246:pelican_ptu.c **** 				}
 247:pelican_ptu.c **** 				if(pitch_offset_inc) pitch_offset_changed=1;
 788              	 1 254 0
 789 0884 10301BE5 		bl	lpc_aci_SavePara
 790 0888 000053E3 		.loc 1 255 0
 791 088c 0C00000A 		bl	lpc_aci_WriteParatoFlash
 792 0890 54309FE5 	.L75:
 793 0894 0120A0E3 		.loc 1 261 0
 794 0898 0020C3E5 		sub	sp, fp, #12
 795 089c 080000EA 		ldmfd	sp, {fp, sp, lr}
 796              		bx	lr
 248:pelican_ptu.c **** 			}else
 249:pelican_ptu.c **** 			{
 250:pelican_ptu.c **** 				if (pitch_offset_changed)
 797              	lign	2
 798 08a0 44309FE5 	.L76:
 799 08a4 0030D3E5 		.word	LL_1khz_attitude_data
 800 08a8 000053E3 		.word	reset_timeout_roll.1713
 801 08ac 0400000A 		.word	715827883
 251:pelican_ptu.c **** 				{
 252:pelican_ptu.c **** 					pitch_offset_changed=0;
 802              	d	PTU_cam_angle_roll_offset
 803 08b0 34309FE5 		.word	roll_offset_changed.1712
 804 08b4 0020A0E3 		.word	reset_timeout_pitch.1718
 805 08b8 0020C3E5 		.word	PTU_cam_angle_pitch_offset
 253:pelican_ptu.c **** 
 254:pelican_ptu.c **** 					lpc_aci_SavePara();
 806              	rd	pitch_offset_changed.1717
 807 08bc FEFFFFEB 	.LFE6:
 255:pelican_ptu.c **** 					lpc_aci_WriteParatoFlash();
 808              	size	PTU_update_middle_positions_by_stick, .-PTU_update_middle_positions_by_stick
 809 08c0 FEFFFFEB 		.comm	GPS_timeout,4,4
 810              		.comm	SYSTEM_initialized,1,1
 256:pelican_ptu.c **** 
 257:pelican_ptu.c **** 				}
 258:pelican_ptu.c **** 			}
 259:pelican_ptu.c **** 		}
 260:pelican_ptu.c **** 	}
 261:pelican_ptu.c **** }
 811              	omm	CAMERA_ptu,32,4
 812 08c4 0CD04BE2 		.comm	CAMERA_Commands,12,4
 813 08c8 00689DE8 		.section	.debug_frame,"",%progbits
 814 08cc 1EFF2FE1 	.Lframe0:
 815              		.4byte	.LECIE0-.LSCIE0
 816              	.LSCIE0:
 817              		.4byte	0xffffffff
 818 08d0 00000000 		.byte	0x1
 819 08d4 1C000000 		.ascii	"\000"
 820 08d8 ABAAAA2A 		.uleb128 0x1
 821 08dc 00000000 		.sleb128 -4
 822 08e0 20000000 		.byte	0xe
 823 08e4 14000000 		.byte	0xc
 824 08e8 00000000 		.uleb128 0xd
 825 08ec 18000000 		.uleb128 0x0
 826              		.align	2
 827              	.LECIE0:
 828              	.LSFDE0:
 829              		.4byte	.LEFDE0-.LASFDE0
 830              	.LASFDE0:
 831              		.4byte	.Lframe0
 977              	.LLST1:
DEFINED SYMBOLS
                            *ABS*:00000000 pelican_ptu.c
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:15     .bss:00000000 PTU_cam_angle_roll_offset
                             .bss:00000000 $d
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:21     .bss:00000004 PTU_cam_angle_pitch_offset
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:26     .bss:00000008 PTU_enable_plain_ch7_to_servo
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:32     .text:00000000 PTU_init
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:39     .text:00000000 $a
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:117    .text:000000e0 $d
                            *COM*:00000020 CAMERA_ptu
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:123    .bss:0000000c cam_angle_pitch.1614
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:126    .bss:00000010 ptu_cnt.1610
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:132    .text:000000e8 PTU_update
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:138    .text:000000e8 $a
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:547    .text:000005ac PTU_update_middle_positions_by_stick
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:369    .text:000003e4 SERVO_pitch_move
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:453    .text:000004cc SERVO_roll_move
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:357    .text:000003c8 $d
                            *COM*:0000000c CAMERA_Commands
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:375    .text:000003e4 $a
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:445    .text:000004c0 $d
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:459    .text:000004cc $a
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:527    .text:000005a0 $d
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:534    .bss:00000014 reset_timeout_pitch.1718
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:536    .bss:00000018 pitch_offset_changed.1717
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:539    .bss:0000001c reset_timeout_roll.1713
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:541    .bss:00000020 roll_offset_changed.1712
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:553    .text:000005ac $a
C:\Users\Malte\AppData\Local\Temp/ccsLbaaa.s:818    .text:000008d0 $d
                            *COM*:00000004 GPS_timeout
                            *COM*:00000001 SYSTEM_initialized

UNDEFINED SYMBOLS
PTU_cam_option_4_version
RO_RC_Data
IMU_CalcData
lpc_aci_SavePara
lpc_aci_WriteParatoFlash
LL_1khz_attitude_data
